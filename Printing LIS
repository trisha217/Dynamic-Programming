#include<bits/stdc++.h>
int longestIncreasingSubsequence(int nums[], int n)
{
    vector<int> dp(n,1),hash(n);
    int maxi =1;
    int lastIndex = 0;
    for(int i=0;i<n;i++)
    {
        hash[i] = i; //initialising hash array with index value by default
        for(int prev =0;prev<i;prev++){
            if(nums[prev]<nums[i] && 1+dp[prev]>dp[i]){
                dp[i] = dp[prev] + 1;
                hash[i] = prev; //to store the previous guy
            }
        }
        if(dp[i]>maxi){
            maxi = dp[i];
            lastIndex = i; //coz we want to store the lastIndex where LIS is max.
        }
    }
    vector<int> temp;
    temp.push_back(nums[lastIndex]);
    while(hash[lastIndex]!=lastIndex){
        lastIndex = hash[lastIndex];
        temp.push_back(nums[lastIndex]);
    }
    reverse(temp.begin(),temp.end());
    for(auto it: temp){
        cout<<it<<" ";
    }
    cout<<endl;
    return maxi;
}
